@page "/cart"
@inject ICartService CartService
@implements IDisposable

@if (!orderPlaced)
{
    <h3>Shopping Cart</h3>
    @if (cartItems == null || cartItems.Count <= 0)
    {
        <span>You have no items in your cart.</span>
    }
    else
    {
        <div>
            @foreach (var item in cartItems)
            {
                <div class="item-container">
                    <div class="item-image-wrapper"><img src="@item.Image" class="item-image"></div>
                    <div class="item-name">
                        <h5><a href="/product/@item.ProductId">@item.ProductTitle</a></h5>
                        @if (@item.EditionName.CompareTo("Default") != 0)
                        {
                            <span>@item.EditionName</span>
                        }
                        <br>
                        <button class="btn-delete" @onclick="@(() => DeleteItem(item))">Delete</button>
                        <EditForm Model="item">
                            <InputNumber id="quantity" Min="1" @bind-Value="item.Quantity" class="form-control" style="width: 70px" />
                        </EditForm>
                    </div>
                    <div class="item-price">@item.Quantity x @item.Price = @(item.Price * item.Quantity)</div>
                </div>
            }
            <div class="item-price">
                Total (@GetNumberOfItems()): $@GetSumOfTotal()
            </div>
            <div style="text-align: center; margin-top: 10px">
                <button class="btn btn-primary btn-lg" @onclick="PlaceOrder">Place Order</button>
            </div>
        </div>
    }
}
else
{
    <h3>Thank you for your order</h3>
    <h4>Here's what you will get:</h4>
    <div>
        @foreach (var item in cartItems)
        {
            <div class="item-container">
                <div class="item-image-wrapper"><img src="@item.Image" class="item-image"></div>
                <div class="item-name">
                    <h5><a href="/product/@item.ProductId">@item.ProductTitle</a></h5>
                    @if (@item.EditionName.CompareTo("Default") != 0)
                    {
                        <span>@item.EditionName</span>
                    }
                </div>
                <div class="item-price">@item.Quantity x @item.Price = @(item.Price * item.Quantity)</div>
            </div>
        }
        <div class="item-price">
            Total (@GetNumberOfItems()): $@GetSumOfTotal()
        </div>
    </div>
}


@code {
    List<CartItem> cartItems = new List<CartItem>();
    bool orderPlaced = false;

    protected override async Task OnInitializedAsync()
    {
        cartItems = await CartService.GetCartItems();
        CartService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        CartService.OnChange -= StateHasChanged;
    }

    private async Task DeleteItem(CartItem item)
    {
        await CartService.DeleteItem(item);
        cartItems = await CartService.GetCartItems();
    }

    private async Task AddItem(CartItem item)
    {
        await CartService.AddToCart(item);
        cartItems = await CartService.GetCartItems();
    }

    private async Task PlaceOrder()
    {
        orderPlaced = true;
        await CartService.EmptyCart();
    }

    public decimal GetSumOfTotal()
    {
        decimal sum = 0;

        foreach (var item in cartItems)
        {
            sum += item.Price * item.Quantity;
        }
        return sum;
    }

    public int GetNumberOfItems()
    {
        int result = 0;

        foreach (var item in cartItems)
        {
            result += item.Quantity;
        }
        return result;
    }
}
